#!/usr/bin/env python3
"""
Example Usage of USD Scene Generator
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ USD —Å—Ü–µ–Ω
"""

import os
import sys
from pathlib import Path

# –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É Python
sys.path.insert(0, str(Path(__file__).parent))

from generate_usd_scene import USDSceneGenerator
from usd_utils import USDUnitManager, USDBuildingManager, USDTerrainManager, USDEffectManager


def create_example_scene():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ —Å—Ü–µ–Ω–∏"""
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É USD —Å—Ü–µ–Ω–∏...")
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤–∏–≤–æ–¥—É
    os.makedirs("out", exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ü–µ–Ω—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    generator = USDSceneGenerator("scene.yaml", "out/example_scene.usda")
    success = generator.generate_scene()
    
    if success:
        print("‚úÖ –ü—Ä–∏–∫–ª–∞–¥ —Å—Ü–µ–Ω–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ: out/example_scene.usda")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏")
    
    return success


def create_custom_scene():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—É —Å—Ü–µ–Ω—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —É—Ç–∏–ª—ñ—Ç"""
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó USD —Å—Ü–µ–Ω–∏...")
    
    try:
        from pxr import Usd, UsdGeom, Gf
        USD_AVAILABLE = True
    except ImportError:
        print("‚ùå USD Python bindings –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")
        return False
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π stage
    stage = Usd.Stage.CreateNew("out/custom_scene.usda")
    stage.SetMetadata("upAxis", "Y")
    stage.SetMetadata("metersPerUnit", 1.0)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
    unit_manager = USDUnitManager(stage)
    building_manager = USDBuildingManager(stage)
    terrain_manager = USDTerrainManager(stage)
    effect_manager = USDEffectManager(stage)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—å—î—Ñ
    terrain_manager.create_terrain("grassland", 100.0, 0.2)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —é–Ω—ñ—Ç—ñ–≤
    blue_army_positions = [(10, 10), (12, 10), (14, 10), (16, 10)]
    for pos in blue_army_positions:
        unit_manager.create_unit_sprite("warrior", pos, [0.2, 0.4, 0.8], 1.0)
    
    red_army_positions = [(80, 80), (82, 80), (84, 80), (86, 80)]
    for pos in red_army_positions:
        unit_manager.create_unit_sprite("archer", pos, [0.8, 0.2, 0.2], 0.8)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—É–¥—ñ–≤–ª—ñ
    building_manager.create_building("castle", (50, 50), "neutral", 0, 1.0)
    building_manager.create_building("tower", (20, 20), "army_1", 45, 0.8)
    building_manager.create_building("tower", (80, 80), "army_2", -45, 0.8)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –µ—Ñ–µ–∫—Ç–∏
    effect_manager.create_effect("magic_aura", (50, 50), 10.0, [1.0, 0.0, 1.0], 0.7)
    effect_manager.create_effect("fire", (30, 30), 3.0, [1.0, 0.3, 0.0], 0.8)
    
    # –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ü–µ–Ω—É
    stage.Save()
    print("‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞ —Å—Ü–µ–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: out/custom_scene.usda")
    
    return True


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("=== USD Scene Generator Example ===")
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    if not os.path.exists("scene.yaml"):
        print("‚ùå –§–∞–π–ª scene.yaml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ —Å—Ü–µ–Ω–∏
    print("1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É —Å—Ü–µ–Ω–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    success1 = create_example_scene()
    
    print()
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—É —Å—Ü–µ–Ω—É
    print("2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —Å—Ü–µ–Ω–∏...")
    success2 = create_custom_scene()
    
    print()
    
    if success1 and success2:
        print("üéâ –í—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("–§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó out/")
        print()
        print("–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É USD —Ñ–∞–π–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:")
        print("- USD Composer (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π)")
        print("- Blender –∑ USD –ø–ª–∞–≥—ñ–Ω–æ–º")
        print("- Houdini")
        print("- Omniverse Create/View")
    else:
        print("‚ùå –î–µ—è–∫—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏")


if __name__ == "__main__":
    main()