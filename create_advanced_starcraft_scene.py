#!/usr/bin/env python3
"""
–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó StarCraft —Å—Ü–µ–Ω–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
"""
import bpy
import os
import math
import random
import yaml

def load_config():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    with open('params/pack.yaml', 'r') as f:
        return yaml.safe_load(f)

def clear_scene():
    """–û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏"""
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # –û—á–∏—â–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
    for material in bpy.data.materials:
        bpy.data.materials.remove(material)

def create_terrain_with_palette(palette):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Ä–µ–Ω—É –∑ –ø–∞–ª—ñ—Ç—Ä–æ—é –∫–æ–ª—å–æ—Ä—ñ–≤"""
    bpy.ops.mesh.primitive_plane_add(size=20, location=(0, 0, 0))
    terrain = bpy.context.active_object
    terrain.name = "Terrain"
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–ª—ñ—Ç—Ä–∏ –∫–æ–ª—å–æ—Ä—ñ–≤
    if isinstance(palette, list) and len(palette) >= 3:
        base_color = palette[1]  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–ª—ñ—Ä
    else:
        base_color = [0.2, 0.4, 0.2]  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    mat = bpy.data.materials.new(name="Terrain_Material")
    mat.use_nodes = True
    mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (*base_color, 1.0)
    terrain.data.materials.append(mat)
    
    return terrain

def create_unit_cluster(center, count, size_range, color, name_prefix):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä–∞ —é–Ω—ñ—Ç—ñ–≤"""
    units = []
    for i in range(count):
        # –í–∏–ø–∞–¥–∫–æ–≤–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞
        angle = random.uniform(0, 2 * math.pi)
        distance = random.uniform(0, 2)
        x = center[0] + distance * math.cos(angle)
        y = center[1] + distance * math.sin(angle)
        
        size = random.uniform(size_range[0], size_range[1])
        
        bpy.ops.mesh.primitive_cylinder_add(radius=size, depth=size*2, location=(x, y, 0.5))
        unit = bpy.context.active_object
        unit.name = f"{name_prefix}_Unit_{i+1}"
        
        # –ú–∞—Ç–µ—Ä—ñ–∞–ª
        mat = bpy.data.materials.new(name=f"{unit.name}_Material")
        mat.use_nodes = True
        mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (*color, 1.0)
        unit.data.materials.append(mat)
        
        units.append(unit)
    
    return units

def create_portal_effect_advanced(center, radius, falloff, invert=False):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É"""
    # –û—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ä—Ç–∞–ª
    bpy.ops.mesh.primitive_torus_add(
        major_radius=radius, 
        minor_radius=radius*0.1, 
        location=center
    )
    portal = bpy.context.active_object
    portal.name = "Portal"
    
    # –ú–∞—Ç–µ—Ä—ñ–∞–ª –∑ –µ–º—ñ—Å—ñ—î—é
    mat = bpy.data.materials.new(name="Portal_Material")
    mat.use_nodes = True
    mat.node_tree.nodes["Principled BSDF"].inputs[17].default_value = (0.5, 0.8, 1.0)  # –°–∏–Ω—ñ–π –µ–º—ñ—Å—ñ—è
    mat.node_tree.nodes["Principled BSDF"].inputs[18].default_value = 3.0  # –°–∏–ª–∞ –µ–º—ñ—Å—ñ—ó
    portal.data.materials.append(mat)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏
    for i in range(3):
        bpy.ops.mesh.primitive_torus_add(
            major_radius=radius + (i+1) * 0.3, 
            minor_radius=radius*0.05, 
            location=center
        )
        ring = bpy.context.active_object
        ring.name = f"Portal_Ring_{i+1}"
        
        # –ü—Ä–æ–∑–æ—Ä–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª
        ring_mat = bpy.data.materials.new(name=f"Portal_Ring_{i+1}_Material")
        ring_mat.use_nodes = True
        ring_mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (0.3, 0.6, 1.0, 0.3)
        ring_mat.blend_method = 'BLEND'
        ring.data.materials.append(ring_mat)
    
    return portal

def create_hud_advanced(left_info, right_info):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ HUD"""
    # –õ—ñ–≤–∏–π HUD
    bpy.ops.mesh.primitive_plane_add(size=3, location=(-7, -4, 2))
    left_hud = bpy.context.active_object
    left_hud.name = "Left_HUD"
    
    # –ü—Ä–∞–≤–∏–π HUD
    bpy.ops.mesh.primitive_plane_add(size=3, location=(7, -4, 2))
    right_hud = bpy.context.active_object
    right_hud.name = "Right_HUD"
    
    # –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è HUD
    for hud, info in [(left_hud, left_info), (right_hud, right_info)]:
        mat = bpy.data.materials.new(name=f"{hud.name}_Material")
        mat.use_nodes = True
        mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (0.05, 0.05, 0.05, 0.9)
        mat.blend_method = 'BLEND'
        hud.data.materials.append(mat)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é (—Å–∏–º—É–ª—è—Ü—ñ—è)
        print(f"{hud.name}: {info}")

def setup_camera_advanced():
    """–†–æ–∑—à–∏—Ä–µ–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏"""
    bpy.ops.object.camera_add(location=(10, -10, 8))
    camera = bpy.context.active_object
    camera.rotation_euler = (1.0, 0, 0.785)
    bpy.context.scene.camera = camera
    return camera

def setup_lighting_advanced():
    """–†–æ–∑—à–∏—Ä–µ–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è"""
    # –û—Å–Ω–æ–≤–Ω–µ —Å–≤—ñ—Ç–ª–æ
    bpy.ops.object.light_add(type='SUN', location=(5, 5, 10))
    sun = bpy.context.active_object
    sun.data.energy = 4
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ä—Ç–∞–ª—É
    bpy.ops.object.light_add(type='AREA', location=(0, 0, 4))
    area_light = bpy.context.active_object
    area_light.data.energy = 8
    area_light.data.color = (0.5, 0.8, 1.0)
    area_light.data.size = 2
    
    # –ó–∞–ø–æ–≤–Ω—é–≤–∞–ª—å–Ω–µ —Å–≤—ñ—Ç–ª–æ
    bpy.ops.object.light_add(type='AREA', location=(-5, -5, 3))
    fill_light = bpy.context.active_object
    fill_light.data.energy = 2
    fill_light.data.color = (1.0, 0.9, 0.8)
    fill_light.data.size = 3
    
    return sun, area_light, fill_light

def main():
    print("üé¨ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó StarCraft —Å—Ü–µ–Ω–∏")
    print("=" * 50)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    config = load_config()
    shot_config = config['shots'][0]  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π —à–æ—Ç
    
    print(f"üìã –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —à–æ—Ç—É: {shot_config['id']}")
    print(f"üé® –ü–∞–ª—ñ—Ç—Ä–∞: {shot_config['palette']}")
    print(f"üåÄ –ü–æ—Ä—Ç–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç: {shot_config['portal']}")
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
    clear_scene()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Ä–µ–Ω—É –∑ –ø–∞–ª—ñ—Ç—Ä–æ—é
    print("üåç –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Ä–µ–Ω—É –∑ –ø–∞–ª—ñ—Ç—Ä–æ—é...")
    terrain = create_terrain_with_palette(shot_config['palette'])
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
    print("üì∑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏...")
    camera = setup_camera_advanced()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
    print("üí° –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è...")
    sun, area_light, fill_light = setup_lighting_advanced()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ —é–Ω—ñ—Ç—ñ–≤
    print("‚öîÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ —é–Ω—ñ—Ç—ñ–≤...")
    
    # –õ—ñ–≤–∏–π –∫–ª–∞—Å—Ç–µ—Ä (Terran)
    left_center = (shot_config['left_cluster']['rect'][0] * 20 - 10, 
                   shot_config['left_cluster']['rect'][1] * 20 - 10,
                   0.5)  # –î–æ–¥–∞—î–º–æ Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    left_units = create_unit_cluster(
        left_center,
        shot_config['left_cluster']['count'],
        shot_config['left_cluster']['size'],
        [0.3, 0.5, 0.9],  # –°–∏–Ω—ñ–π –∫–æ–ª—ñ—Ä –¥–ª—è Terran
        "Terran"
    )
    
    # –ü—Ä–∞–≤–∏–π –∫–ª–∞—Å—Ç–µ—Ä (Zerg)
    right_center = (shot_config['right_cluster']['rect'][0] * 20 - 10, 
                    shot_config['right_cluster']['rect'][1] * 20 - 10,
                    0.5)  # –î–æ–¥–∞—î–º–æ Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    right_units = create_unit_cluster(
        right_center,
        shot_config['right_cluster']['count'],
        shot_config['right_cluster']['size'],
        [0.7, 0.3, 0.7],  # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è Zerg
        "Zerg"
    )
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
    print("üåÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É...")
    portal_center = (shot_config['portal']['center'][0] * 20 - 10, 
                     shot_config['portal']['center'][1] * 20 - 10,
                     1)  # –î–æ–¥–∞—î–º–æ Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    portal = create_portal_effect_advanced(
        portal_center,
        shot_config['portal']['radius'] * 10,
        shot_config['portal']['falloff'],
        shot_config['portal']['invert']
    )
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HUD
    print("üñ•Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HUD...")
    create_hud_advanced(shot_config['hud']['left'], shot_config['hud']['right'])
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
    print("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É...")
    bpy.context.scene.render.engine = 'CYCLES'
    bpy.context.scene.render.resolution_x = config['image_size'][0]
    bpy.context.scene.render.resolution_y = config['image_size'][1]
    bpy.context.scene.render.filepath = "renders/blender/advanced_starcraft_scene.png"
    bpy.context.scene.cycles.use_denoising = False
    bpy.context.scene.cycles.samples = 128  # –ó–º–µ–Ω—à—É—î–º–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    os.makedirs("renders/blender", exist_ok=True)
    
    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
    print("üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ü–µ–Ω–∏...")
    bpy.ops.render.render(write_still=True)
    
    print("‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∞ StarCraft —Å—Ü–µ–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    print(f"üìÅ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: renders/blender/advanced_starcraft_scene.png")
    print(f"‚öîÔ∏è –õ—ñ–≤–∏–π –∫–ª–∞—Å—Ç–µ—Ä (Terran): {len(left_units)} —é–Ω—ñ—Ç—ñ–≤")
    print(f"‚öîÔ∏è –ü—Ä–∞–≤–∏–π –∫–ª–∞—Å—Ç–µ—Ä (Zerg): {len(right_units)} —é–Ω—ñ—Ç—ñ–≤")
    print(f"üåÄ –ü–æ—Ä—Ç–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç: —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    print(f"üñ•Ô∏è HUD: –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

if __name__ == "__main__":
    main()