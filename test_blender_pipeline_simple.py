#!/usr/bin/env python3
"""
–°–ø—Ä–æ—â–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Blender –ø–∞–π–ø–ª–∞–π–Ω—É
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –±–µ–∑ –∑–∞–ø—É—Å–∫—É Blender
"""

import sys
import os
from pathlib import Path
import yaml
import json

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—ñ–≤
sys.path.append(str(Path(__file__).parent / "blender"))

def test_config_importer():
    """–¢–µ—Å—Ç—É—î —ñ–º–ø–æ—Ä—Ç–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Config Importer...")
    
    try:
        from enhanced_config_importer import EnhancedConfigImporter
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        test_config = {
            "buildings": [
                {
                    "name": "Test Building",
                    "type": "cube",
                    "position": [0, 0, 0],
                    "scale": [1, 1, 1]
                }
            ]
        }
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        os.makedirs("assets/buildings", exist_ok=True)
        with open("assets/buildings/test_config.yaml", 'w') as f:
            yaml.dump(test_config, f)
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞
        importer = EnhancedConfigImporter("assets")
        config = importer.load_config("buildings", "test_config")
        
        print("  ‚úì Config Importer –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"  ‚úó Config Importer –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_geometry_generator():
    """–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–µ–æ–º–µ—Ç—Ä—ñ—ó (–±–µ–∑ Blender)"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Geometry Generator...")
    
    try:
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        building_config = {
            "name": "Test Building",
            "type": "cube",
            "position": [0, 0, 0],
            "scale": [1, 1, 1]
        }
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞)
        required_fields = ["name", "type", "position", "scale"]
        for field in required_fields:
            if field not in building_config:
                raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ: {field}")
        
        print("  ‚úì Geometry Generator –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"  ‚úó Geometry Generator –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_render_pipeline():
    """–¢–µ—Å—Ç—É—î —Ä–µ–Ω–¥–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω (–±–µ–∑ Blender)"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Render Pipeline...")
    
    try:
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
        render_settings = {
            "engine": "CYCLES",
            "samples": 128,
            "resolution": [1920, 1080],
            "output_format": "PNG"
        }
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        required_fields = ["engine", "samples", "resolution"]
        for field in required_fields:
            if field not in render_settings:
                raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ: {field}")
        
        print("  ‚úì Render Pipeline –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"  ‚úó Render Pipeline –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_integrated_pipeline():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Integrated Pipeline...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —à–æ—Ç—É
        shot_config = {
            "shot_id": "test_shot",
            "terrain": {
                "type": "plane",
                "size": [20, 20]
            },
            "buildings": [
                {
                    "name": "Test Building",
                    "type": "cube",
                    "position": [0, 0, 0],
                    "scale": [1, 1, 1]
                }
            ],
            "camera": {
                "position": [0, -10, 5],
                "rotation": [60, 0, 0]
            },
            "render_settings": {
                "engine": "CYCLES",
                "samples": 64,
                "resolution": [1920, 1080]
            }
        }
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        errors = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        required_fields = ["shot_id"]
        for field in required_fields:
            if field not in shot_config:
                errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: {field}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
        if "render_settings" in shot_config:
            render_settings = shot_config["render_settings"]
            if "engine" not in render_settings:
                errors.append("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ä–µ–Ω–¥–µ—Ä –¥–≤–∏–≥—É–Ω")
            elif render_settings["engine"] not in ["CYCLES", "BLENDER_EEVEE"]:
                errors.append("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–Ω–¥–µ—Ä –¥–≤–∏–≥—É–Ω")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–∞–º–µ—Ä–∏
        if "camera" in shot_config:
            camera_config = shot_config["camera"]
            if "position" not in camera_config:
                errors.append("–í—ñ–¥—Å—É—Ç–Ω—è –ø–æ–∑–∏—Ü—ñ—è –∫–∞–º–µ—Ä–∏")
            if "rotation" not in camera_config:
                errors.append("–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏")
        
        if errors:
            raise ValueError(f"–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {errors}")
        
        print("  ‚úì Integrated Pipeline –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"  ‚úó Integrated Pipeline –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_config_validation():
    """–¢–µ—Å—Ç—É—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Config Validation...")
    
    try:
        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        valid_config = {
            "shot_id": "test",
            "camera": {
                "position": [0, 0, 0],
                "rotation": [0, 0, 0]
            },
            "render_settings": {
                "engine": "CYCLES"
            }
        }
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        errors = []
        required_fields = ["shot_id"]
        for field in required_fields:
            if field not in valid_config:
                errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: {field}")
        
        if errors:
            raise ValueError(f"–í–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º–∞—î –ø–æ–º–∏–ª–∫–∏: {errors}")
        
        # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        invalid_config = {
            "camera": {
                "position": [0, 0, 0]
                # –í—ñ–¥—Å—É—Ç–Ω—î rotation
            },
            "render_settings": {
                "engine": "INVALID_ENGINE"
            }
        }
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        errors = []
        if "shot_id" not in invalid_config:
            errors.append("–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: shot_id")
        
        if "render_settings" in invalid_config:
            render_settings = invalid_config["render_settings"]
            if "engine" not in render_settings:
                errors.append("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ä–µ–Ω–¥–µ—Ä –¥–≤–∏–≥—É–Ω")
            elif render_settings["engine"] not in ["CYCLES", "BLENDER_EEVEE"]:
                errors.append("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–Ω–¥–µ—Ä –¥–≤–∏–≥—É–Ω")
        
        if not errors:
            raise ValueError("–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –º–∞—î –ø–æ–º–∏–ª–æ–∫")
        
        print("  ‚úì Config Validation –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"  ‚úó Config Validation –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_template_loading():
    """–¢–µ—Å—Ç—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Template Loading...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —à–∞–±–ª–æ–Ω—É
        if not Path("assets/templates/battle_scene_template.yaml").exists():
            print("  ‚ö† –®–∞–±–ª–æ–Ω battle_scene_template.yaml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É
        with open("assets/templates/battle_scene_template.yaml", 'r') as f:
            template_config = yaml.safe_load(f)
        
        if "shot_id" not in template_config:
            raise ValueError("–®–∞–±–ª–æ–Ω –Ω–µ –º—ñ—Å—Ç–∏—Ç—å shot_id")
        
        print("  ‚úì Template Loading –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"  ‚úó Template Loading –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("–ó–∞–ø—É—Å–∫ —Å–ø—Ä–æ—â–µ–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ Blender Pipeline...")
    print("=" * 50)
    
    tests = [
        test_config_importer,
        test_geometry_generator,
        test_render_pipeline,
        test_integrated_pipeline,
        test_config_validation,
        test_template_loading
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"  ‚úó –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ {test.__name__}: {e}")
    
    print("=" * 50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return 0
    else:
        print("‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return 1

if __name__ == "__main__":
    sys.exit(main())
