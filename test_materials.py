#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
"""

import bpy
import sys
from pathlib import Path

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—ñ–≤
sys.path.append(str(Path(__file__).parent))

def test_material_creation():
    """–¢–µ—Å—Ç—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤...")
    
    try:
        from blender.material_generator import StarCraftMaterialGenerator
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        material_gen = StarCraftMaterialGenerator()
        
        # –¢–µ—Å—Ç 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É –¥–ª—è —é–Ω—ñ—Ç–∞
        marine_material = material_gen.create_unit_material("marine", (0.2, 0.4, 0.8))
        assert marine_material is not None
        assert marine_material.name == "SC_marine_Material"
        print("‚úì –ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è —é–Ω—ñ—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É –¥–ª—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó
        grass_material = material_gen.create_terrain_material("grass")
        assert grass_material is not None
        assert grass_material.name == "Terrain_grass_Material"
        print("‚úì –ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è UI –º–∞—Ç–µ—Ä—ñ–∞–ª—É
        hud_material = material_gen.create_ui_material("hud")
        assert hud_material is not None
        assert hud_material.name == "UI_hud_Material"
        print("‚úì UI –º–∞—Ç–µ—Ä—ñ–∞–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 4: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É –µ—Ñ–µ–∫—Ç—É
        portal_material = material_gen.create_effect_material("portal")
        assert portal_material is not None
        assert portal_material.name == "Effect_portal_Material"
        print("‚úì –ú–∞—Ç–µ—Ä—ñ–∞–ª –µ—Ñ–µ–∫—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        print("–í—Å—ñ —Ç–µ—Å—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤: {e}")
        return False

def test_scene_generation():
    """–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Å—Ü–µ–Ω–∏"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ü–µ–Ω–∏...")
    
    try:
        from blender.enhanced_scene_generator import EnhancedStarCraftSceneGenerator
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config = type('Config', (), {'image_size': [1920, 1080]})()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        generator = EnhancedStarCraftSceneGenerator(config)
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —à–æ—Ç—É
        shot_config = {
            "terrain_type": "grass",
            "left_cluster": {
                "rect": [0.2, 0.5],
                "count": 3,
                "size": [16, 32],
                "unit_type": "marine"
            },
            "right_cluster": {
                "rect": [0.8, 0.5],
                "count": 3,
                "size": [16, 32],
                "unit_type": "zealot"
            },
            "hud": True
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ü–µ–Ω–∏
        generator.setup_scene(shot_config)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
        objects = bpy.context.scene.objects
        assert len(objects) > 0
        print(f"‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ {len(objects)} –æ–±'—î–∫—Ç—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
        materials = bpy.data.materials
        assert len(materials) > 0
        print(f"‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤")
        
        print("–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ü–µ–Ω–∏ –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ü–µ–Ω–∏: {e}")
        return False

def test_uv_mapping():
    """–¢–µ—Å—Ç—É—î UV-—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è UV-—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è...")
    
    try:
        from blender.material_generator import StarCraftMaterialGenerator
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±'—î–∫—Ç–∞
        bpy.ops.mesh.primitive_cube_add(size=2)
        test_obj = bpy.context.object
        test_obj.name = "Test_UV_Object"
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        material_gen = StarCraftMaterialGenerator()
        
        # –¢–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ UV-—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
        mapping_types = ["smart", "cube", "cylinder", "sphere"]
        
        for mapping_type in mapping_types:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ø—ñ—ó –æ–±'—î–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç—É
            bpy.ops.object.duplicate()
            test_copy = bpy.context.object
            test_copy.name = f"Test_UV_{mapping_type}"
            
            # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è UV-—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
            material_gen.apply_uv_mapping(test_copy, mapping_type)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î UV –¥–∞–Ω—ñ
            if test_copy.data.uv_layers:
                print(f"‚úì UV-—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è {mapping_type} –ø—Ä–∞—Ü—é—î")
            else:
                print(f"‚úó UV-—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è {mapping_type} –Ω–µ –ø—Ä–∞—Ü—é—î")
        
        print("–¢–µ—Å—Ç UV-—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ UV-—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è: {e}")
        return False

def test_procedural_materials():
    """–¢–µ—Å—Ç—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤...")
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±'—î–∫—Ç–∞
        bpy.ops.mesh.primitive_cube_add(size=1)
        test_obj = bpy.context.object
        test_obj.name = "Test_Procedural"
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É
        material = bpy.data.materials.new(name="Test_Procedural_Material")
        material.use_nodes = True
        nodes = material.node_tree.nodes
        nodes.clear()
        
        # Noise texture
        noise = nodes.new(type='ShaderNodeTexNoise')
        noise.inputs['Scale'].default_value = 5.0
        noise.inputs['Detail'].default_value = 15.0
        noise.location = (-400, 0)
        
        # Principled BSDF
        bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
        bsdf.location = (0, 0)
        
        # Output
        output = nodes.new(type='ShaderNodeOutputMaterial')
        output.location = (200, 0)
        
        # Connections
        material.node_tree.links.new(noise.outputs['Color'], bsdf.inputs['Base Color'])
        material.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])
        
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É
        test_obj.data.materials.append(material)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
        assert len(test_obj.data.materials) > 0
        assert test_obj.data.materials[0].name == "Test_Procedural_Material"
        
        print("‚úì –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        print("–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏"""
    print("=== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ ===")
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    tests = [
        test_material_creation,
        test_scene_generation,
        test_uv_mapping,
        test_procedural_materials
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚úó –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ {test.__name__}: {e}")
    
    print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ ===")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏")
    
    return passed == total

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)