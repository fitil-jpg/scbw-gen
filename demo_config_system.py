#!/usr/bin/env python3
"""
Configuration System Demo
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π —Ç–∞ —Ñ–∞–π–ª–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
"""

import logging
from pathlib import Path
import tempfile
import shutil

from config_parser import UniversalConfigParser, ConfigFormat, create_pack_config_schema
from file_io_utils import FileIOUtils
from config_manager import ConfigManager, ConfigType
from asset_manager import AssetManager, AssetType
from validation_system import ValidationSystem, ValidationSchema, ValidationRule, ValidationLevel, ValidationSeverity

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
LOG = logging.getLogger(__name__)


def demo_config_parser():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ü–ê–†–°–ï–†–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô")
    print("="*60)
    
    parser = UniversalConfigParser()
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    test_data = {
        "seed": 1337,
        "image_size": [1280, 720],
        "shots": [
            {
                "id": "shot_1001",
                "palette": [[0.07, 0.13, 0.09], [0.12, 0.2, 0.14]],
                "portal": {"center": [0.5, 0.5], "radius": 0.18},
                "export": {"png": True, "exr16": True}
            },
            {
                "id": "shot_1002", 
                "palette": "ArmyColors",
                "portal": {"center": [0.52, 0.48], "radius": 0.21},
                "export": {"png": True, "exr16": False}
            }
        ]
    }
    
    # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        yaml_file = temp_path / "test.yaml"
        json_file = temp_path / "test.json"
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ YAML
        parser.save_file(test_data, yaml_file, ConfigFormat.YAML)
        print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ YAML: {yaml_file}")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ JSON
        parser.save_file(test_data, json_file, ConfigFormat.JSON)
        print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ JSON: {json_file}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–∑–∞–¥
        loaded_yaml = parser.load_file(yaml_file)
        loaded_json = parser.load_file(json_file)
        
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ YAML: {len(loaded_yaml['shots'])} shots")
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ JSON: {len(loaded_json['shots'])} shots")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        schema = create_pack_config_schema()
        yaml_errors = parser.validate_config(loaded_yaml, schema)
        json_errors = parser.validate_config(loaded_json, schema)
        
        print(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è YAML: {len(yaml_errors)} –ø–æ–º–∏–ª–æ–∫")
        print(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è JSON: {len(json_errors)} –ø–æ–º–∏–ª–æ–∫")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
        converted_file = temp_path / "converted.json"
        parser.convert_format(yaml_file, converted_file)
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ YAML -> JSON: {converted_file}")


def demo_file_io_utils():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª–æ–≤–∏—Ö —É—Ç–∏–ª—ñ—Ç"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –§–ê–ô–õ–û–í–ò–• –£–¢–ò–õ–Ü–¢")
    print("="*60)
    
    file_utils = FileIOUtils(create_backups=True)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
        test_files = []
        for i in range(3):
            test_file = temp_path / f"test_{i}.txt"
            test_file.write_text(f"Test content {i}")
            test_files.append(test_file)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        subdir = temp_path / "subdir"
        file_utils.ensure_directory(subdir)
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {subdir}")
        
        # –ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏
        for i, src_file in enumerate(test_files):
            dst_file = subdir / f"copy_{i}.txt"
            file_utils.copy_file(src_file, dst_file)
        
        print(f"‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ {len(test_files)} —Ñ–∞–π–ª—ñ–≤ –≤ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é")
        
        # –ó–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª–∏
        all_files = file_utils.find_files(temp_path, "*.txt")
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_files)} .txt —Ñ–∞–π–ª—ñ–≤")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª–∏
        for file_path in all_files[:2]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 2
            file_info = file_utils.get_file_info(file_path)
            if file_info:
                print(f"   üìÑ {file_path.name}: {file_info.size} –±–∞–π—Ç, —Ö–µ—à: {file_info.checksum[:8]}...")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        sync_dest = temp_path / "sync_dest"
        file_utils.ensure_directory(sync_dest)
        
        sync_result = file_utils.sync_directories(temp_path / "subdir", sync_dest)
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: {len(sync_result['copied'])} —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ, {len(sync_result['updated'])} –æ–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–∞–∫–µ—Ç–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        operations = [
            {"operation": "copy", "source": str(test_files[0]), "destination": str(sync_dest / "batch_copy.txt")},
            {"operation": "backup", "source": str(test_files[1])},
        ]
        
        batch_result = file_utils.batch_operation(operations)
        print(f"‚úÖ –ü–∞–∫–µ—Ç–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó: {len(batch_result['success'])} —É—Å–ø—ñ—à–Ω–∏—Ö, {len(batch_result['failed'])} –Ω–µ–≤–¥–∞–ª–∏—Ö")


def demo_config_manager():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô")
    print("="*60)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        config_manager = ConfigManager(temp_dir)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        pack_config_data = {
            "seed": 1337,
            "image_size": [1280, 720],
            "shots": [
                {
                    "id": "demo_shot",
                    "palette": [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],
                    "portal": {"center": [0.5, 0.5], "radius": 0.2},
                    "export": {"png": True, "exr16": True}
                }
            ]
        }
        
        scene_config_data = {
            "scene": {
                "name": "Demo Scene",
                "size": [100, 100],
                "terrain": {"type": "grassland", "height_variation": 0.2}
            },
            "units": {
                "army_1": {
                    "color": [0.2, 0.4, 0.8],
                    "spawn_area": [10, 10, 30, 30],
                    "units": [{"type": "warrior", "count": 10}]
                }
            }
        }
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        pack_file = Path(temp_dir) / "pack.yaml"
        scene_file = Path(temp_dir) / "scene.yaml"
        
        with open(pack_file, 'w') as f:
            import yaml
            yaml.dump(pack_config_data, f)
        
        with open(scene_file, 'w') as f:
            yaml.dump(scene_config_data, f)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        pack_entry = config_manager.load_config(pack_file, ConfigType.PACK)
        scene_entry = config_manager.load_config(scene_file, ConfigType.SCENE)
        
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ pack –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {pack_entry.metadata.name}")
        print(f"   –í–∞–ª—ñ–¥–Ω–∞: {pack_entry.is_valid}")
        print(f"   –ü–æ–º–∏–ª–æ–∫: {len(pack_entry.validation_errors)}")
        
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ scene –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {scene_entry.metadata.name}")
        print(f"   –í–∞–ª—ñ–¥–Ω–∞: {scene_entry.is_valid}")
        print(f"   –ü–æ–º–∏–ª–æ–∫: {len(scene_entry.validation_errors)}")
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
        all_configs = config_manager.list_configs()
        pack_configs = config_manager.list_configs(ConfigType.PACK)
        
        print(f"‚úÖ –í—Å—å–æ–≥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π: {len(all_configs)}")
        print(f"‚úÖ Pack –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π: {len(pack_configs)}")
        
        # –û–±'—î–¥–Ω–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
        merged_entry = config_manager.merge_configs(pack_entry, scene_entry)
        print(f"‚úÖ –û–±'—î–¥–Ω–∞–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {merged_entry.metadata.name}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
        json_file = Path(temp_dir) / "pack.json"
        converted_entry = config_manager.convert_config(pack_entry, ConfigFormat.JSON)
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ JSON: {converted_entry.path}")


def demo_asset_manager():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—Å–µ—Ç—ñ–≤"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –ê–°–ï–¢–Ü–í")
    print("="*60)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        asset_manager = AssetManager(temp_dir)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –∞—Å–µ—Ç–∏
        test_assets = []
        
        # –¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ (–¥–∞–Ω—ñ)
        for i in range(3):
            data_file = Path(temp_dir) / "data" / f"data_{i}.txt"
            data_file.parent.mkdir(exist_ok=True)
            data_file.write_text(f"Data content {i}")
            test_assets.append(data_file)
        
        # JSON —Ñ–∞–π–ª–∏ (–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
        for i in range(2):
            config_file = Path(temp_dir) / "data" / f"config_{i}.json"
            config_data = {"id": f"config_{i}", "value": i * 10}
            with open(config_file, 'w') as f:
                import json
                json.dump(config_data, f)
            test_assets.append(config_file)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(test_assets)} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∞—Å–µ—Ç—ñ–≤")
        
        # –°–∫–∞–Ω—É–≤–∞—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        found_assets = asset_manager.scan_directory(temp_dir, recursive=True)
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(found_assets)} –∞—Å–µ—Ç—ñ–≤ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ")
        
        # –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∞—Å–µ—Ç–∏ –≤—Ä—É—á–Ω—É
        for asset_file in test_assets:
            try:
                asset_info = asset_manager.register_asset(asset_file, "data")
                print(f"   üìÑ {asset_info.name}: {asset_info.asset_type.value}, {asset_info.size} –±–∞–π—Ç")
            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó {asset_file}: {e}")
        
        # –ü–æ—à—É–∫ –∞—Å–µ—Ç—ñ–≤
        data_assets = asset_manager.find_assets(asset_type=AssetType.DATA)
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(data_assets)} –∞—Å–µ—Ç—ñ–≤ —Ç–∏–ø—É DATA")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞—Å–µ—Ç—ñ–≤
        validation_results = asset_manager.validate_all_assets()
        print(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è: {len(validation_results['valid'])} –≤–∞–ª—ñ–¥–Ω–∏—Ö, {len(validation_results['invalid'])} –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö")
        
        # –ï–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫—É –∞—Å–µ—Ç—ñ–≤
        export_file = Path(temp_dir) / "asset_list.json"
        asset_manager.export_asset_list(export_file, "json")
        print(f"‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –∞—Å–µ—Ç—ñ–≤: {export_file}")


def demo_validation_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò –í–ê–õ–Ü–î–ê–¶–Ü–á")
    print("="*60)
    
    validation_system = ValidationSystem()
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ö–µ–º—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    schema = ValidationSchema("demo_schema", "1.0")
    
    # –î–æ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    schema.add_rule(ValidationRule(
        field_path="name",
        validator=lambda x: isinstance(x, str) and len(x) > 0,
        message="–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –Ω–µ–ø—É—Å—Ç–∏–º —Ä—è–¥–∫–æ–º",
        required=True,
        data_type=str,
        severity=ValidationSeverity.HIGH
    ))
    
    schema.add_rule(ValidationRule(
        field_path="age",
        validator=lambda x: isinstance(x, int) and 0 <= x <= 150,
        message="–í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 0 –¥–æ 150",
        required=True,
        data_type=int,
        min_value=0,
        max_value=150,
        severity=ValidationSeverity.MEDIUM
    ))
    
    schema.add_rule(ValidationRule(
        field_path="email",
        validator=lambda x: isinstance(x, str) and "@" in x and "." in x,
        message="Email –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º",
        required=False,
        data_type=str,
        severity=ValidationSeverity.LOW
    ))
    
    # –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Å—Ö–µ–º—É
    validation_system.register_schema(schema)
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    test_cases = [
        {
            "name": "–í–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
            "data": {"name": "John Doe", "age": 30, "email": "john@example.com"}
        },
        {
            "name": "–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ",
            "data": {"age": 30, "email": "john@example.com"}
        },
        {
            "name": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö",
            "data": {"name": "John Doe", "age": "thirty", "email": "john@example.com"}
        },
        {
            "name": "–ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ–∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º",
            "data": {"name": "John Doe", "age": 200, "email": "john@example.com"}
        },
        {
            "name": "–ù–µ–≤—ñ—Ä–Ω–∏–π email",
            "data": {"name": "John Doe", "age": 30, "email": "invalid-email"}
        }
    ]
    
    # –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤–∏–π –≤–∏–ø–∞–¥–æ–∫
    for test_case in test_cases:
        print(f"\nüìã {test_case['name']}:")
        result = validation_system.validate(test_case['data'], "demo_schema")
        
        if result.is_valid:
            print("   ‚úÖ –í–∞–ª—ñ–¥–Ω–∞")
        else:
            print(f"   ‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ ({len(result.errors)} –ø–æ–º–∏–ª–æ–∫, {len(result.warnings)} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å)")
            
            for issue in result.issues[:3]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 3 –ø—Ä–æ–±–ª–µ–º–∏
                severity_icon = "üî¥" if issue.severity == ValidationSeverity.HIGH else "üü°" if issue.severity == ValidationSeverity.MEDIUM else "üîµ"
                print(f"      {severity_icon} {issue.field_path}: {issue.message}")
                if issue.suggestion:
                    print(f"         üí° {issue.suggestion}")
    
    # –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–ø–∞–¥–∫—É
    print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –í–ê–õ–Ü–î–ê–¶–Ü–á:")
    print("-" * 40)
    last_result = validation_system.validate(test_cases[-1]['data'], "demo_schema")
    report = validation_system.generate_report(last_result, include_suggestions=True)
    print(report)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô –¢–ê –§–ê–ô–õ–û–í–ò–• –û–ü–ï–†–ê–¶–Ü–ô")
    print("=" * 80)
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        demo_config_parser()
        demo_file_io_utils()
        demo_config_manager()
        demo_asset_manager()
        demo_validation_system()
        
        print("\n" + "="*80)
        print("‚úÖ –í–°–Ü –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–á –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("="*80)
        
    except Exception as e:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê –ü–Ü–î –ß–ê–° –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–á: {e}")
        LOG.exception("–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:")


if __name__ == "__main__":
    main()