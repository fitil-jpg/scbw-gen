#!/usr/bin/env python3
"""
MVP Test - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MVP –±–µ–∑ Blender
"""

import os
import sys
from pathlib import Path

# –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.append(str(Path(__file__).parent))

from mvp_asset_manager import SimpleAssetManager
from mvp_config_manager import SimpleConfigManager
from mvp_asset_loader import MVPAssetLoader
from mvp_material_system_test import MVPMaterialSystemTest as MVPMaterialSystem

def test_asset_manager():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Asset Manager"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Asset Manager...")
    
    asset_manager = SimpleAssetManager("test_assets")
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
    test_dir = Path("test_assets")
    test_dir.mkdir(exist_ok=True)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
    (test_dir / "texture1.png").touch()
    (test_dir / "model1.obj").touch()
    (test_dir / "sound1.wav").touch()
    
    # –°–∫–∞–Ω—É–≤–∞—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
    assets = asset_manager.scan_directory()
    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞—Å–µ—Ç—ñ–≤: {len(assets)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∏–ø–∏
    for asset in assets:
        print(f"  - {asset.name}: {asset.asset_type} ({asset.size} bytes)")
    
    return len(assets) == 3

def test_config_manager():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Config Manager"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Config Manager...")
    
    config_manager = SimpleConfigManager("test_configs")
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    test_config = {
        "scene": {
            "name": "Test Scene",
            "version": "1.0"
        },
        "buildings": {
            "Test_Building": {
                "position": [0, 0, 1],
                "size": 1.0,
                "color": [1.0, 0.0, 0.0, 1.0]
            }
        }
    }
    
    # –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config_path = config_manager.save_config(test_config, "test_config.yaml")
    print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {config_path}")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    loaded_config = config_manager.load_config("test_config.yaml")
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {loaded_config['scene']['name']}")
    
    return loaded_config["scene"]["name"] == "Test Scene"

def test_asset_loader():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Asset Loader"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Asset Loader...")
    
    asset_loader = MVPAssetLoader("test_assets")
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
    test_dir = Path("test_assets")
    test_dir.mkdir(exist_ok=True)
    
    (test_dir / "texture1.png").touch()
    (test_dir / "model1.obj").touch()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–µ–∫ –∞—Å–µ—Ç—ñ–≤
    assets = asset_loader.load_asset_stack("test_stack", [
        "test_assets/texture1.png",
        "test_assets/model1.obj"
    ])
    
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å—Ç–µ–∫ –∞—Å–µ—Ç—ñ–≤: {len(assets)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ –∞—Å–µ—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    if len(assets) == 0:
        print("‚ö†Ô∏è –ê—Å–µ—Ç–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≤ —Å—Ç–µ–∫")
        return False
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–∫–µ—Ç –∞—Å–µ—Ç—ñ–≤
    pack = asset_loader.create_asset_pack("test_pack", {
        "texture1": "test_assets/texture1.png",
        "model1": "test_assets/model1.obj"
    })
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–∫–µ—Ç: {pack['name']} ({pack['total_size']} bytes)")
    
    return len(assets) == 2

def test_material_system():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Material System"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Material System...")
    
    material_system = MVPMaterialSystem()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–µ—Å–µ—Ç–∏
    presets = material_system.presets
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–µ—Å–µ—Ç—ñ–≤: {len(presets)}")
    
    for name, preset in presets.items():
        print(f"  - {name}: {preset.name}")
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª
    custom_mat = material_system.create_custom_material(
        "Test_Material",
        base_color=(1.0, 0.0, 0.0, 1.0),
        metallic=0.5,
        roughness=0.3
    )
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª: {custom_mat['name']}")
    
    return len(presets) >= 5

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MVP StarCraft Scene Generator")
    print("=" * 50)
    
    tests = [
        ("Asset Manager", test_asset_manager),
        ("Config Manager", test_config_manager),
        ("Asset Loader", test_asset_loader),
        ("Material System", test_material_system)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù–û")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù–û")
        except Exception as e:
            print(f"‚ùå {test_name}: –ü–û–ú–ò–õ–ö–ê - {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return 1

if __name__ == "__main__":
    exit(main())