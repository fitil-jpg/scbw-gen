#!/usr/bin/env python3
"""
Test USD Scene Generator
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ USD —Å—Ü–µ–Ω –±–µ–∑ USD –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
"""

import os
import yaml
from pathlib import Path


def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    if not os.path.exists("scene.yaml"):
        print("‚ùå –§–∞–π–ª scene.yaml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    try:
        with open("scene.yaml", 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Å–µ–∫—Ü—ñ—ó
        required_sections = ['scene', 'units', 'buildings']
        for section in required_sections:
            if section not in config:
                print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—è —Å–µ–∫—Ü—ñ—è: {section}")
                return False
        
        print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        print(f"   - –°—Ü–µ–Ω–∞: {config['scene']['name']}")
        print(f"   - –ê—Ä–º—ñ–π: {len(config['units'])}")
        print(f"   - –ë—É–¥—ñ–≤–µ–ª—å: {len(config['buildings'])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False


def test_assets_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∞–∫—Ç–∏–≤—ñ–≤"""
    print("\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∞–∫—Ç–∏–≤—ñ–≤...")
    
    assets_path = Path("assets")
    if not assets_path.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è assets –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    required_dirs = ['units', 'buildings', 'terrain', 'effects']
    for dir_name in required_dirs:
        dir_path = assets_path / dir_name
        if not dir_path.exists():
            print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {dir_name}")
            return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏
    config_files = [
        'units/units_config.yaml',
        'buildings/buildings_config.yaml', 
        'terrain/terrain_config.yaml',
        'effects/effects_config.yaml'
    ]
    
    for config_file in config_files:
        file_path = assets_path / config_file
        if not file_path.exists():
            print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª: {config_file}")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å YAML
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                yaml.safe_load(f)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ YAML —Ñ–∞–π–ª—ñ {config_file}: {e}")
            return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤—ñ–≤ –≤–∞–ª—ñ–¥–Ω–∞")
    return True


def test_generator_import():
    """–¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    print("\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    
    try:
        from generate_usd_scene import USDSceneGenerator
        print("‚úÖ USDSceneGenerator —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä
        generator = USDSceneGenerator("scene.yaml", "out/test.usda")
        print("‚úÖ –ï–∫–∑–µ–º–ø–ª—è—Ä USDSceneGenerator —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


def test_utils_import():
    """–¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É —É—Ç–∏–ª—ñ—Ç"""
    print("\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É —É—Ç–∏–ª—ñ—Ç...")
    
    try:
        from usd_utils import (
            USDUnitManager, 
            USDBuildingManager, 
            USDTerrainManager, 
            USDEffectManager,
            USDSceneUtils
        )
        print("‚úÖ –í—Å—ñ —É—Ç–∏–ª—ñ—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —É—Ç–∏–ª—ñ—Ç: {e}")
        return False


def test_yaml_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥—É YAML –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
    print("\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É YAML...")
    
    config_files = [
        "scene.yaml",
        "assets/units/units_config.yaml",
        "assets/buildings/buildings_config.yaml",
        "assets/terrain/terrain_config.yaml", 
        "assets/effects/effects_config.yaml"
    ]
    
    for config_file in config_files:
        if not os.path.exists(config_file):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {config_file}")
            return False
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            print(f"‚úÖ {config_file} - OK")
        except Exception as e:
            print(f"‚ùå {config_file} - –ü–æ–º–∏–ª–∫–∞: {e}")
            return False
    
    return True


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è USD Scene Generator ===\n")
    
    tests = [
        test_config_loading,
        test_assets_structure,
        test_generator_import,
        test_utils_import,
        test_yaml_parsing
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("\n–î–ª—è –ø–æ–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å USD –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
        print("pip install usd-core pyyaml numpy Pillow")
    else:
        print("‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)