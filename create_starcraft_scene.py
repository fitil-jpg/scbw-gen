#!/usr/bin/env python3
"""
–°—Ç–≤–æ—Ä–µ–Ω–Ω—è StarCraft —Å—Ü–µ–Ω–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Blender
"""
import bpy
import os
import math
import random

def clear_scene():
    """–û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏"""
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # –û—á–∏—â–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
    for material in bpy.data.materials:
        bpy.data.materials.remove(material)

def create_terrain():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Ä–µ–Ω—É"""
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–ª–∏–∫–æ—ó –ø–ª–æ—â–∏–Ω–∏ –¥–ª—è —Ç–µ—Ä–µ–Ω—É
    bpy.ops.mesh.primitive_plane_add(size=20, location=(0, 0, 0))
    terrain = bpy.context.active_object
    terrain.name = "Terrain"
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É –¥–ª—è —Ç–µ—Ä–µ–Ω—É
    mat = bpy.data.materials.new(name="Terrain_Material")
    mat.use_nodes = True
    mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (0.2, 0.4, 0.2, 1.0)  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∏–π
    terrain.data.materials.append(mat)
    
    return terrain

def create_building(position, size, color, name):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—É–¥—ñ–≤–ª—ñ"""
    bpy.ops.mesh.primitive_cube_add(size=size, location=position)
    building = bpy.context.active_object
    building.name = name
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É
    mat = bpy.data.materials.new(name=f"{name}_Material")
    mat.use_nodes = True
    mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = color
    building.data.materials.append(mat)
    
    return building

def create_unit(position, size, color, name):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —é–Ω—ñ—Ç–∞"""
    bpy.ops.mesh.primitive_cylinder_add(radius=size, depth=size*2, location=position)
    unit = bpy.context.active_object
    unit.name = name
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É
    mat = bpy.data.materials.new(name=f"{name}_Material")
    mat.use_nodes = True
    mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = color
    unit.data.materials.append(mat)
    
    return unit

def create_portal_effect(center, radius):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É"""
    bpy.ops.mesh.primitive_torus_add(
        major_radius=radius, 
        minor_radius=radius*0.1, 
        location=center
    )
    portal = bpy.context.active_object
    portal.name = "Portal"
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É –∑ –µ–º—ñ—Å—ñ—î—é
    mat = bpy.data.materials.new(name="Portal_Material")
    mat.use_nodes = True
    mat.node_tree.nodes["Principled BSDF"].inputs[17].default_value = (0.5, 0.8, 1.0)  # –°–∏–Ω—ñ–π –µ–º—ñ—Å—ñ—è
    mat.node_tree.nodes["Principled BSDF"].inputs[18].default_value = 2.0  # –°–∏–ª–∞ –µ–º—ñ—Å—ñ—ó
    portal.data.materials.append(mat)
    
    return portal

def setup_camera():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏"""
    bpy.ops.object.camera_add(location=(8, -8, 6))
    camera = bpy.context.active_object
    camera.rotation_euler = (1.1, 0, 0.785)
    bpy.context.scene.camera = camera
    return camera

def setup_lighting():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è"""
    # –û—Å–Ω–æ–≤–Ω–µ —Å–≤—ñ—Ç–ª–æ
    bpy.ops.object.light_add(type='SUN', location=(5, 5, 10))
    sun = bpy.context.active_object
    sun.data.energy = 3
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–µ —Å–≤—ñ—Ç–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞–ª—É
    bpy.ops.object.light_add(type='AREA', location=(0, 0, 3))
    area_light = bpy.context.active_object
    area_light.data.energy = 5
    area_light.data.color = (0.5, 0.8, 1.0)  # –°–∏–Ω—ñ–π –∫–æ–ª—ñ—Ä
    
    return sun, area_light

def create_hud_elements():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è HUD –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–ø—Ä–æ—Å—Ç–∏—Ö –ø–ª–æ—â–∏–Ω)"""
    # –õ—ñ–≤–∏–π HUD
    bpy.ops.mesh.primitive_plane_add(size=2, location=(-6, -3, 2))
    left_hud = bpy.context.active_object
    left_hud.name = "Left_HUD"
    left_hud.rotation_euler = (0, 0, 0)
    
    # –ü—Ä–∞–≤–∏–π HUD
    bpy.ops.mesh.primitive_plane_add(size=2, location=(6, -3, 2))
    right_hud = bpy.context.active_object
    right_hud.name = "Right_HUD"
    right_hud.rotation_euler = (0, 0, 0)
    
    # –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è HUD
    for hud in [left_hud, right_hud]:
        mat = bpy.data.materials.new(name=f"{hud.name}_Material")
        mat.use_nodes = True
        mat.node_tree.nodes["Principled BSDF"].inputs[0].default_value = (0.1, 0.1, 0.1, 0.8)  # –¢–µ–º–Ω–∏–π –Ω–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π
        hud.data.materials.append(mat)

def main():
    print("üé¨ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è StarCraft —Å—Ü–µ–Ω–∏")
    print("=" * 40)
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
    clear_scene()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Ä–µ–Ω—É
    print("üåç –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Ä–µ–Ω—É...")
    terrain = create_terrain()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
    print("üì∑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏...")
    camera = setup_camera()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
    print("üí° –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è...")
    sun, area_light = setup_lighting()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—É–¥—ñ–≤–µ–ª—å
    print("üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—É–¥—ñ–≤–µ–ª—å...")
    buildings = []
    
    # Terran –±—É–¥—ñ–≤–ª—ñ (—Å–∏–Ω—ñ)
    terran_positions = [(-4, 2, 1), (-2, 3, 1), (-6, 1, 1)]
    for i, pos in enumerate(terran_positions):
        building = create_building(
            pos, 
            1.5, 
            (0.2, 0.4, 0.8, 1.0), 
            f"Terran_Building_{i+1}"
        )
        buildings.append(building)
    
    # Zerg –±—É–¥—ñ–≤–ª—ñ (—Ñ—ñ–æ–ª–µ—Ç–æ–≤—ñ)
    zerg_positions = [(4, -2, 1), (6, -1, 1), (2, -3, 1)]
    for i, pos in enumerate(zerg_positions):
        building = create_building(
            pos, 
            1.2, 
            (0.6, 0.2, 0.6, 1.0), 
            f"Zerg_Building_{i+1}"
        )
        buildings.append(building)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —é–Ω—ñ—Ç—ñ–≤
    print("‚öîÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —é–Ω—ñ—Ç—ñ–≤...")
    units = []
    
    # Terran —é–Ω—ñ—Ç–∏ (—Å–∏–Ω—ñ)
    for i in range(8):
        x = random.uniform(-5, -1)
        y = random.uniform(0, 4)
        unit = create_unit(
            (x, y, 0.5), 
            0.3, 
            (0.3, 0.5, 0.9, 1.0), 
            f"Terran_Unit_{i+1}"
        )
        units.append(unit)
    
    # Zerg —é–Ω—ñ—Ç–∏ (—Ñ—ñ–æ–ª–µ—Ç–æ–≤—ñ)
    for i in range(6):
        x = random.uniform(1, 5)
        y = random.uniform(-4, 0)
        unit = create_unit(
            (x, y, 0.5), 
            0.25, 
            (0.7, 0.3, 0.7, 1.0), 
            f"Zerg_Unit_{i+1}"
        )
        units.append(unit)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
    print("üåÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É...")
    portal = create_portal_effect((0, 0, 1), 1.5)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HUD –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    print("üñ•Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HUD –µ–ª–µ–º–µ–Ω—Ç—ñ–≤...")
    create_hud_elements()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
    print("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É...")
    bpy.context.scene.render.engine = 'CYCLES'
    bpy.context.scene.render.resolution_x = 1280
    bpy.context.scene.render.resolution_y = 720
    bpy.context.scene.render.filepath = "renders/blender/starcraft_scene.png"
    bpy.context.scene.cycles.use_denoising = False
    bpy.context.scene.cycles.samples = 256  # –ó–º–µ–Ω—à—É—î–º–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    os.makedirs("renders/blender", exist_ok=True)
    
    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
    print("üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ü–µ–Ω–∏...")
    bpy.ops.render.render(write_still=True)
    
    print("‚úÖ StarCraft —Å—Ü–µ–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    print(f"üìÅ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: renders/blender/starcraft_scene.png")
    print(f"üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –±—É–¥—ñ–≤–µ–ª—å: {len(buildings)}")
    print(f"‚öîÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ —é–Ω—ñ—Ç—ñ–≤: {len(units)}")
    print(f"üåÄ –ü–æ—Ä—Ç–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç: 1")

if __name__ == "__main__":
    main()