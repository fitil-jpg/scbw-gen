#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è —Ç–∞ HDRI –¥–ª—è Blender
Test script for lighting and HDRI system
"""

import sys
import os
from pathlib import Path
import logging

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—ñ–≤ Blender
blender_dir = Path(__file__).parent / "blender"
sys.path.append(str(blender_dir))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_lighting_config_manager():
    """–¢–µ—Å—Ç—É—î –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è"""
    try:
        from lighting_config import LightingConfigManager, LightingConfig
        
        logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è...")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        config_manager = LightingConfigManager("configs/lighting")
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è –±–æ–π–æ–≤–æ—ó —Å—Ü–µ–Ω–∏
        battle_config = config_manager.create_battle_lighting_config("sunset")
        logger.info(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ–π–æ–≤–æ—ó —Å—Ü–µ–Ω–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {len(battle_config.main_lights)} –æ—Å–Ω–æ–≤–Ω–∏—Ö –ª–∞–π—Ç—ñ–≤")
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è —Å—Ç—É–¥—ñ—ó
        studio_config = config_manager.create_studio_lighting_config("clean")
        logger.info(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç—É–¥—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–∞: {len(studio_config.main_lights)} –æ—Å–Ω–æ–≤–Ω–∏—Ö –ª–∞–π—Ç—ñ–≤")
        
        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        errors = config_manager.validate_config(battle_config)
        if errors:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {errors}")
        else:
            logger.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞")
        
        # –¢–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        config_path = "configs/lighting/test_config.yaml"
        config_manager.save_config(battle_config, config_path)
        loaded_config = config_manager.load_config(config_path)
        logger.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
        os.remove(config_path)
        
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def test_hdri_environment():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É HDRI —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    try:
        from hdri_environment import HDRIEnvironment
        
        logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ HDRI —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ HDRI
        hdri_system = HDRIEnvironment({"output_dir": "renders/blender"})
        
        # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–µ—Å–µ—Ç—ñ–≤
        presets = hdri_system.get_available_presets()
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ñ HDRI –ø—Ä–µ—Å–µ—Ç–∏: {len(presets)}")
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –ø—Ä–µ—Å–µ—Ç—É
        custom_preset = {
            "type": "gradient",
            "gradient_type": "SPHERICAL",
            "colors": [[0.2, 0.4, 0.6], [0.8, 0.9, 1.0]],
            "strength": 1.0,
            "description": "–¢–µ—Å—Ç–æ–≤–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç"
        }
        hdri_system.create_custom_preset("test_gradient", custom_preset)
        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø—Ä–µ—Å–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –¢–µ—Å—Ç –µ–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        export_path = "configs/lighting/test_hdri_config.json"
        hdri_system.export_hdri_config(export_path)
        logger.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è HDRI –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞")
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
        if os.path.exists(export_path):
            os.remove(export_path)
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ HDRI —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ HDRI: {e}")
        return False

def test_lighting_system():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è"""
    try:
        from lighting_system import LightingSystem
        
        logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è...")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
        lighting_system = LightingSystem({"output_dir": "renders/blender"})
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
        sunset_preset = lighting_system.create_lighting_preset("sunset")
        logger.info(f"–ü—Ä–µ—Å–µ—Ç –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {len(sunset_preset['main_lights'])} –æ—Å–Ω–æ–≤–Ω–∏—Ö –ª–∞–π—Ç—ñ–≤")
        
        # –¢–µ—Å—Ç –µ–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        export_path = "configs/lighting/test_lighting_config.yaml"
        lighting_system.export_lighting_config(export_path)
        logger.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞")
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
        if os.path.exists(export_path):
            os.remove(export_path)
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è: {e}")
        return False

def test_integrated_pipeline():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω –∑ –Ω–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è"""
    try:
        from integrated_blender_pipeline import IntegratedBlenderPipeline
        
        logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω—É...")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞–π–ø–ª–∞–π–Ω—É
        pipeline = IntegratedBlenderPipeline("assets", "renders/blender")
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
        test_lighting_config = {
            "hdri": {
                "type": "preset",
                "preset_name": "sunset",
                "strength": 1.0
            },
            "main_lights": [
                {
                    "name": "Test_Sun",
                    "type": "SUN",
                    "position": [5, 5, 10],
                    "energy": 2.0,
                    "color": [1.0, 0.8, 0.6]
                }
            ],
            "additional_lights": [
                {
                    "name": "Test_Fill",
                    "type": "AREA",
                    "position": [-3, -3, 8],
                    "energy": 1.0,
                    "color": [0.8, 0.9, 1.0],
                    "size": 3.0
                }
            ]
        }
        
        pipeline.create_lighting_preset("test_preset", test_lighting_config)
        logger.info("–ü—Ä–µ—Å–µ—Ç –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω")
        
        # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–µ—Å–µ—Ç—ñ–≤
        presets = pipeline.get_available_lighting_presets()
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ—Å–µ—Ç–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è: {len(presets)}")
        
        # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
        lighting_info = pipeline.get_lighting_info()
        logger.info(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è: {len(lighting_info.get('lights', {}))} –ª–∞–π—Ç—ñ–≤")
        
        logger.info("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω—É: {e}")
        return False

def test_configuration_files():
    """–¢–µ—Å—Ç—É—î —Ñ–∞–π–ª–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    try:
        logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
        
        config_files = [
            "configs/lighting/battle_sunset_lighting.yaml",
            "configs/lighting/night_battle_lighting.yaml",
            "configs/lighting/studio_clean_lighting.yaml"
        ]
        
        from lighting_config import LightingConfigManager
        
        config_manager = LightingConfigManager("configs/lighting")
        
        for config_file in config_files:
            if os.path.exists(config_file):
                try:
                    config = config_manager.load_config(config_file)
                    errors = config_manager.validate_config(config)
                    if errors:
                        logger.warning(f"–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó {config_file}: {errors}")
                    else:
                        logger.info(f"‚úÖ {config_file} - –≤–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è")
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {config_file}: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {config_file}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è —Ç–∞ HDRI")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
    os.makedirs("configs/lighting", exist_ok=True)
    os.makedirs("renders/blender", exist_ok=True)
    
    tests = [
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è", test_lighting_config_manager),
        ("–°–∏—Å—Ç–µ–º–∞ HDRI —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞", test_hdri_environment),
        ("–°–∏—Å—Ç–µ–º–∞ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è", test_lighting_system),
        ("–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω", test_integrated_pipeline),
        ("–§–∞–π–ª–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", test_configuration_files)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ü—ñ–¥—Å—É–º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    logger.info(f"\n{'='*50}")
    logger.info("–ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    logger.info(f"{'='*50}")
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    logger.info(f"\n–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    
    if failed == 0:
        logger.info("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
    else:
        logger.error(f"‚ö†Ô∏è {failed} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)