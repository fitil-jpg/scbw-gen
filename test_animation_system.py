#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó Blender SCBW Pipeline
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ –ø–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
"""

import bpy
import sys
from pathlib import Path
import logging

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—ñ–≤
current_dir = Path(__file__).parent
sys.path.append(str(current_dir / "blender"))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_keyframe_manager():
    """–¢–µ—Å—Ç—É—î –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á–æ–≤–∏—Ö –∫–∞–¥—Ä—ñ–≤."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è KeyframeManager...")
    
    try:
        from animation_system import KeyframeManager
        
        # –û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
        bpy.ops.object.select_all(action='SELECT')
        bpy.ops.object.delete(use_global=False)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±'—î–∫—Ç–∞
        bpy.ops.mesh.primitive_cube_add(location=(0, 0, 0))
        cube = bpy.context.active_object
        cube.name = "TestCube"
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        keyframe_manager = KeyframeManager()
        
        # –¢–µ—Å—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ—ó
        keyframes = [
            {'frame': 1, 'type': 'location', 'value': (0, 0, 0)},
            {'frame': 30, 'type': 'location', 'value': (5, 0, 0)},
            {'frame': 60, 'type': 'location', 'value': (5, 5, 0)},
            {'frame': 90, 'type': 'location', 'value': (0, 5, 0)},
            {'frame': 120, 'type': 'location', 'value': (0, 0, 0)}
        ]
        keyframe_manager.add_keyframes_sequence(cube, keyframes)
        
        # –¢–µ—Å—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
        rotation_keyframes = [
            {'frame': 1, 'type': 'rotation', 'value': (0, 0, 0)},
            {'frame': 60, 'type': 'rotation', 'value': (0, 0, 3.14159)},
            {'frame': 120, 'type': 'rotation', 'value': (0, 0, 6.28318)}
        ]
        keyframe_manager.add_keyframes_sequence(cube, rotation_keyframes)
        
        # –¢–µ—Å—Ç —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—ó
        keyframe_manager.set_interpolation(cube, 'BEZIER')
        
        print("‚úÖ KeyframeManager: PASS")
        return True
        
    except Exception as e:
        print(f"‚ùå KeyframeManager: FAIL - {e}")
        logger.error(f"KeyframeManager test failed: {e}")
        return False


def test_camera_animator():
    """–¢–µ—Å—Ç—É—î –∞–Ω—ñ–º–∞—Ç–æ—Ä –∫–∞–º–µ—Ä–∏."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è CameraCurveAnimator...")
    
    try:
        from animation_system import CameraCurveAnimator
        from mathutils import Vector
        
        # –û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
        bpy.ops.object.select_all(action='SELECT')
        bpy.ops.object.delete(use_global=False)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–º–µ—Ä–∏
        bpy.ops.object.camera_add(location=(0, -10, 5))
        camera = bpy.context.active_object
        camera.name = "TestCamera"
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ç–æ—Ä–∞
        camera_animator = CameraCurveAnimator()
        
        # –¢–µ—Å—Ç –∫—Ä—É–≥–æ–≤–æ—ó –∫—Ä–∏–≤–æ—ó
        circular_curve = camera_animator.create_circular_camera_path(
            Vector((0, 0, 0)), 10.0, 5.0, "TestCircularPath"
        )
        
        # –¢–µ—Å—Ç —Å–ø—ñ—Ä–∞–ª—å–Ω–æ—ó –∫—Ä–∏–≤–æ—ó
        helical_curve = camera_animator.create_helical_camera_path(
            Vector((0, 0, 0)), 8.0, 2.0, 8.0, 1, "TestHelicalPath"
        )
        
        # –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ—ó –∫—Ä–∏–≤–æ—ó
        custom_points = [
            Vector((-5, -10, 3)),
            Vector((0, -5, 5)),
            Vector((5, 0, 3))
        ]
        custom_curve = camera_animator.create_camera_path(custom_points, "TestCustomPath")
        
        # –¢–µ—Å—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó –∫–∞–º–µ—Ä–∏
        camera_animator.animate_camera_along_curve(
            camera, circular_curve, 1, 50, True
        )
        
        print("‚úÖ CameraCurveAnimator: PASS")
        return True
        
    except Exception as e:
        print(f"‚ùå CameraCurveAnimator: FAIL - {e}")
        logger.error(f"CameraCurveAnimator test failed: {e}")
        return False


def test_sequence_renderer():
    """–¢–µ—Å—Ç—É—î —Ä–µ–Ω–¥–µ—Ä–µ—Ä –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è AnimationSequenceRenderer...")
    
    try:
        from animation_system import AnimationSequenceRenderer
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
        output_dir = Path("test_renders")
        sequence_renderer = AnimationSequenceRenderer(output_dir)
        
        # –¢–µ—Å—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–ª–∞–π–Ω—É
        sequence_renderer.setup_animation_timeline(1, 10, 24)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—Ü–µ–Ω–∏
        scene = bpy.context.scene
        assert scene.frame_start == 1
        assert scene.frame_end == 10
        assert scene.render.fps == 24
        
        print("‚úÖ AnimationSequenceRenderer: PASS")
        return True
        
    except Exception as e:
        print(f"‚ùå AnimationSequenceRenderer: FAIL - {e}")
        logger.error(f"AnimationSequenceRenderer test failed: {e}")
        return False


def test_animation_examples():
    """–¢–µ—Å—Ç—É—î –ø—Ä–∏–∫–ª–∞–¥–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è AnimationExamples...")
    
    try:
        from animation_examples import AnimationExamples
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
        examples = AnimationExamples()
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤
        battle_template = examples.create_animation_config_template('battle_sequence')
        construction_template = examples.create_animation_config_template('building_construction')
        cinematic_template = examples.create_animation_config_template('cinematic_shot')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —à–∞–±–ª–æ–Ω—ñ–≤
        assert 'name' in battle_template
        assert 'duration' in battle_template
        assert 'camera' in battle_template
        
        assert 'name' in construction_template
        assert 'duration' in construction_template
        assert 'building' in construction_template
        
        assert 'name' in cinematic_template
        assert 'duration' in cinematic_template
        assert 'camera' in cinematic_template
        
        print("‚úÖ AnimationExamples: PASS")
        return True
        
    except Exception as e:
        print(f"‚ùå AnimationExamples: FAIL - {e}")
        logger.error(f"AnimationExamples test failed: {e}")
        return False


def test_integrated_pipeline():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è IntegratedAnimationPipeline...")
    
    try:
        from integrated_animation_pipeline import IntegratedAnimationPipeline
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–π–ø–ª–∞–π–Ω—É
        pipeline = IntegratedAnimationPipeline()
        
        # –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = pipeline.config
        assert isinstance(config, dict)
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É
        template = pipeline.create_animation_config_template('battle_sequence')
        assert 'name' in template
        assert 'duration' in template
        
        print("‚úÖ IntegratedAnimationPipeline: PASS")
        return True
        
    except Exception as e:
        print(f"‚ùå IntegratedAnimationPipeline: FAIL - {e}")
        logger.error(f"IntegratedAnimationPipeline test failed: {e}")
        return False


def test_blender_operators():
    """–¢–µ—Å—Ç—É—î –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ Blender."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Blender Operators...")
    
    try:
        from animation_system import (
            SCBW_OT_CreateCircularCameraPath,
            SCBW_OT_CreateHelicalCameraPath,
            SCBW_OT_RenderAnimationSequence
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤
        assert hasattr(SCBW_OT_CreateCircularCameraPath, 'bl_idname')
        assert hasattr(SCBW_OT_CreateHelicalCameraPath, 'bl_idname')
        assert hasattr(SCBW_OT_RenderAnimationSequence, 'bl_idname')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
        assert hasattr(SCBW_OT_CreateCircularCameraPath, 'radius')
        assert hasattr(SCBW_OT_CreateHelicalCameraPath, 'radius')
        
        print("‚úÖ Blender Operators: PASS")
        return True
        
    except Exception as e:
        print(f"‚ùå Blender Operators: FAIL - {e}")
        logger.error(f"Blender Operators test failed: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó...")
    print("=" * 50)
    
    tests = [
        test_keyframe_manager,
        test_camera_animator,
        test_sequence_renderer,
        test_animation_examples,
        test_integrated_pipeline,
        test_blender_operators
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå {test.__name__}: EXCEPTION - {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
    try:
        success = run_all_tests()
        return 0 if success else 1
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"Critical error in main: {e}")
        return 1


if __name__ == "__main__":
    exit(main())