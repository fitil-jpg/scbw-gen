#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyYAML –≤ Blender Python.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Blender –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PyYAML
–≤ –µ–≥–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä.
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path
import tempfile
import urllib.request
import zipfile


def find_blender_executable():
    """–ù–∞—Ö–æ–¥–∏—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Blender –≤ —Å–∏—Å—Ç–µ–º–µ."""
    possible_paths = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    if platform.system() == "Linux":
        possible_paths = [
            "/usr/bin/blender",
            "/usr/local/bin/blender",
            "/snap/bin/blender",
            "/opt/blender/blender",
            "/home/*/blender*/blender",
            "/home/*/Blender*/blender",
        ]
    elif platform.system() == "Darwin":  # macOS
        possible_paths = [
            "/Applications/Blender.app/Contents/MacOS/Blender",
            "/usr/local/bin/blender",
            "/opt/homebrew/bin/blender",
        ]
    elif platform.system() == "Windows":
        possible_paths = [
            "C:\\Program Files\\Blender Foundation\\Blender *\\blender.exe",
            "C:\\Program Files (x86)\\Blender Foundation\\Blender *\\blender.exe",
        ]
    
    # –ò—â–µ–º Blender –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö
    for path_pattern in possible_paths:
        if "*" in path_pattern:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º glob –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å wildcards
            import glob
            matches = glob.glob(os.path.expanduser(path_pattern))
            for match in matches:
                if os.path.isfile(match) and os.access(match, os.X_OK):
                    return match
        else:
            if os.path.isfile(path_pattern) and os.access(path_pattern, os.X_OK):
                return path_pattern
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ which/where
    try:
        if platform.system() == "Windows":
            result = subprocess.run(["where", "blender"], capture_output=True, text=True)
        else:
            result = subprocess.run(["which", "blender"], capture_output=True, text=True)
        
        if result.returncode == 0:
            blender_path = result.stdout.strip().split('\n')[0]
            if os.path.isfile(blender_path) and os.access(blender_path, os.X_OK):
                return blender_path
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass
    
    return None


def get_blender_python_path(blender_executable):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É Blender."""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Blender —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ Python
        cmd = [blender_executable, "--background", "--python-expr", "import sys; print(sys.executable)"]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ Python –∏–∑ –≤—ã–≤–æ–¥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫)
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if line and os.path.isfile(line) and 'python' in line.lower():
                    return line
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired, FileNotFoundError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ Python Blender: {e}")
    
    # Fallback: –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –ø—É—Ç—å
    blender_dir = os.path.dirname(blender_executable)
    possible_python_paths = [
        os.path.join(blender_dir, "python", "bin", "python"),
        os.path.join(blender_dir, "python", "python"),
        os.path.join(blender_dir, "..", "python", "bin", "python"),
        os.path.join(blender_dir, "..", "python", "python"),
    ]
    
    for python_path in possible_python_paths:
        if os.path.isfile(python_path):
            return python_path
    
    return None


def check_yaml_installed(python_executable):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ PyYAML –≤ Python Blender."""
    try:
        cmd = [python_executable, "-c", "import yaml; print('PyYAML version:', yaml.__version__)"]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        return result.returncode == 0
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired, FileNotFoundError):
        return False


def install_yaml_via_pip(python_executable):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PyYAML —á–µ—Ä–µ–∑ pip."""
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyYAML —á–µ—Ä–µ–∑ pip...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º pip
        subprocess.run([python_executable, "-m", "pip", "install", "--upgrade", "pip"], 
                      check=True, capture_output=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyYAML
        subprocess.run([python_executable, "-m", "pip", "install", "PyYAML>=6.0"], 
                      check=True, capture_output=True)
        
        print("‚úÖ PyYAML —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pip")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ pip: {e}")
        return False


def install_yaml_manually(python_executable):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PyYAML –≤—Ä—É—á–Ω—É—é, —Å–∫–∞—á–∏–≤–∞—è –∏ –∫–æ–º–ø–∏–ª–∏—Ä—É—è."""
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyYAML –≤—Ä—É—á–Ω—É—é...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º PyYAML
            yaml_url = "https://github.com/yaml/pyyaml/archive/refs/tags/6.0.1.zip"
            yaml_zip = temp_path / "pyyaml.zip"
            
            print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ PyYAML...")
            urllib.request.urlretrieve(yaml_url, yaml_zip)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
            with zipfile.ZipFile(yaml_zip, 'r') as zip_ref:
                zip_ref.extractall(temp_path)
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏
            yaml_dir = temp_path / "pyyaml-6.0.1"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            print("–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ PyYAML...")
            subprocess.run([python_executable, "setup.py", "install"], 
                          cwd=yaml_dir, check=True, capture_output=True)
            
        print("‚úÖ PyYAML —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False


def create_yaml_test_script():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ YAML –≤ Blender."""
    test_script = """import bpy
import yaml
import sys

print("=== –¢–µ—Å—Ç YAML –≤ Blender ===")
print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"PyYAML –≤–µ—Ä—Å–∏—è: {yaml.__version__}")

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
test_data = {
    'scene': {
        'name': 'Test Scene',
        'objects': ['Cube', 'Sphere', 'Light'],
        'settings': {
            'resolution': [1920, 1080],
            'samples': 64
        }
    }
}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ YAML
yaml_content = yaml.dump(test_data, default_flow_style=False)
print("\\nYAML –∫–æ–Ω—Ç–µ–Ω—Ç:")
print(yaml_content)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
loaded_data = yaml.safe_load(yaml_content)
print("\\n–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
print(loaded_data)

print("\\n‚úÖ YAML —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ Blender!")
"""
    
    with open("test_yaml_in_blender.py", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    print("–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç: test_yaml_in_blender.py")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    print("üé® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyYAML –¥–ª—è Blender Python")
    print("=" * 50)
    
    # 1. –ù–∞—Ö–æ–¥–∏–º Blender
    print("–ü–æ–∏—Å–∫ Blender...")
    blender_executable = find_blender_executable()
    
    if not blender_executable:
        print("‚ùå Blender –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Blender:")
        if platform.system() == "Linux":
            print("   sudo apt install blender  # Ubuntu/Debian")
            print("   sudo dnf install blender  # Fedora")
            print("   sudo pacman -S blender    # Arch Linux")
        elif platform.system() == "Darwin":
            print("   brew install --cask blender  # macOS")
        elif platform.system() == "Windows":
            print("   –°–∫–∞—á–∞–π—Ç–µ —Å https://www.blender.org/download/")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Blender –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω Blender: {blender_executable}")
    
    # 2. –ù–∞—Ö–æ–¥–∏–º Python Blender
    print("–ü–æ–∏—Å–∫ Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ Blender...")
    python_executable = get_blender_python_path(blender_executable)
    
    if not python_executable:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Blender")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω Python: {python_executable}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ YAML
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyYAML...")
    if check_yaml_installed(python_executable):
        print("‚úÖ PyYAML —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        create_yaml_test_script()
        return True
    
    print("‚ö† PyYAML –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
    
    # 4. –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ pip
    if install_yaml_via_pip(python_executable):
        if check_yaml_installed(python_executable):
            print("‚úÖ PyYAML —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pip!")
            create_yaml_test_script()
            return True
    
    # 5. –ï—Å–ª–∏ pip –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
    print("–ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    if install_yaml_manually(python_executable):
        if check_yaml_installed(python_executable):
            print("‚úÖ PyYAML —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!")
            create_yaml_test_script()
            return True
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyYAML")
    print("\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyYAML –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π Python –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –º–æ–¥—É–ª–∏")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ conda –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏ Blender")
    print("3. –°–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ PyYAML –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤")
    
    return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)