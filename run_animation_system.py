#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó Blender SCBW Pipeline
–ù–∞–¥–∞—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π
"""

import bpy
import sys
from pathlib import Path
import logging

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—ñ–≤
current_dir = Path(__file__).parent
sys.path.append(str(current_dir / "blender"))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def show_menu():
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    print("\n" + "=" * 60)
    print("üé¨ –°–ò–°–¢–ï–ú–ê –ê–ù–Ü–ú–ê–¶–Ü–á BLENDER SCBW PIPELINE")
    print("=" * 60)
    print("1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –±–∏—Ç–≤–∏")
    print("2. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞")
    print("3. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é")
    print("4. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é")
    print("5. –ü–∞–∫–µ—Ç–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π")
    print("6. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏")
    print("7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
    print("8. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    print("9. –í–∏—Ö—ñ–¥")
    print("=" * 60)


def create_battle_animation():
    """–°—Ç–≤–æ—Ä—é—î –∞–Ω—ñ–º–∞—Ü—ñ—é –±–∏—Ç–≤–∏."""
    print("\n‚öîÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –±–∏—Ç–≤–∏...")
    
    try:
        from animation_examples import AnimationExamples
        
        examples = AnimationExamples()
        result = examples.create_battle_animation("battle_shot_001")
        
        if result['status'] == 'success':
            print(f"‚úÖ –ê–Ω—ñ–º–∞—Ü—ñ—è –±–∏—Ç–≤–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {len(result['rendered_files'])} –∫–∞–¥—Ä—ñ–≤")
            print(f"üìÅ –§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {result['rendered_files'][0].parent}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"Error creating battle animation: {e}")


def create_construction_animation():
    """–°—Ç–≤–æ—Ä—é—î –∞–Ω—ñ–º–∞—Ü—ñ—é –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞."""
    print("\nüèóÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞...")
    
    try:
        from animation_examples import AnimationExamples
        
        examples = AnimationExamples()
        result = examples.create_building_construction_animation("construction_shot_001")
        
        if result['status'] == 'success':
            print(f"‚úÖ –ê–Ω—ñ–º–∞—Ü—ñ—è –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {len(result['rendered_files'])} –∫–∞–¥—Ä—ñ–≤")
            print(f"üìÅ –§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {result['rendered_files'][0].parent}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"Error creating construction animation: {e}")


def create_cinematic_animation():
    """–°—Ç–≤–æ—Ä—é—î –∫—ñ–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é."""
    print("\nüé≠ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó...")
    
    try:
        from animation_examples import AnimationExamples
        
        examples = AnimationExamples()
        result = examples.create_cinematic_camera_animation("cinematic_shot_001")
        
        if result['status'] == 'success':
            print(f"‚úÖ –ö—ñ–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {len(result['rendered_files'])} –∫–∞–¥—Ä—ñ–≤")
            print(f"üìÅ –§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {result['rendered_files'][0].parent}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"Error creating cinematic animation: {e}")


def create_custom_animation():
    """–°—Ç–≤–æ—Ä—é—î –∫–∞—Å—Ç–æ–º–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é."""
    print("\nüé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó...")
    
    try:
        from integrated_animation_pipeline import IntegratedAnimationPipeline
        
        pipeline = IntegratedAnimationPipeline()
        
        # –ó–∞–ø–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        print("\n–î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏:")
        print("1. battle_sequence - –ê–Ω—ñ–º–∞—Ü—ñ—è –±–∏—Ç–≤–∏")
        print("2. building_construction - –ê–Ω—ñ–º–∞—Ü—ñ—è –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞")
        print("3. cinematic_shot - –ö—ñ–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è")
        
        template_choice = input("–í–∏–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω (1-3): ").strip()
        
        templates = {
            '1': 'battle_sequence',
            '2': 'building_construction',
            '3': 'cinematic_shot'
        }
        
        template = templates.get(template_choice, 'battle_sequence')
        shot_id = input("–í–≤–µ–¥—ñ—Ç—å ID —à–æ—Ç—É: ").strip() or "custom_shot_001"
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        print("\n–î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É):")
        units_count = input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å (–¥–ª—è –±–∏—Ç–≤–∏): ").strip()
        camera_radius = input("–†–∞–¥—ñ—É—Å –∫–∞–º–µ—Ä–∏: ").strip()
        samples = input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–º–ø–ª—ñ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É: ").strip()
        
        custom_settings = {}
        if units_count:
            custom_settings['units'] = {'count': int(units_count)}
        if camera_radius:
            custom_settings['camera'] = {'radius': float(camera_radius)}
        if samples:
            custom_settings['render_settings'] = {'samples': int(samples)}
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        result = pipeline.create_shot_from_template(template, shot_id, custom_settings)
        
        if result['status'] == 'success':
            print(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {len(result['rendered_files'])} –∫–∞–¥—Ä—ñ–≤")
            print(f"üìÅ –§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {result['rendered_files'][0].parent}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"Error creating custom animation: {e}")


def batch_create_animations():
    """–°—Ç–≤–æ—Ä—é—î –∫—ñ–ª—å–∫–∞ –∞–Ω—ñ–º–∞—Ü—ñ–π –ø–∞–∫–µ—Ç–Ω–æ."""
    print("\nüì¶ –ü–∞–∫–µ—Ç–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π...")
    
    try:
        from integrated_animation_pipeline import IntegratedAnimationPipeline
        
        pipeline = IntegratedAnimationPipeline()
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        batch_config = [
            {
                'shot_id': 'batch_battle_001',
                'template': 'battle_sequence',
                'custom_settings': {'units': {'count': 5}}
            },
            {
                'shot_id': 'batch_construction_001',
                'template': 'building_construction',
                'custom_settings': {'building': {'type': 'Factory'}}
            },
            {
                'shot_id': 'batch_cinematic_001',
                'template': 'cinematic_shot',
                'custom_settings': {'camera': {'radius': 20.0}}
            }
        ]
        
        print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π...")
        results = pipeline.batch_create_animations(batch_config)
        
        successful = sum(1 for r in results.values() if r.get('status') == 'success')
        failed = sum(1 for r in results.values() if r.get('status') == 'error')
        
        print(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        print(f"   –£—Å–ø—ñ—à–Ω–∏—Ö: {successful}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–∏—Ö: {failed}")
        
        for shot_id, result in results.items():
            if result['status'] == 'success':
                print(f"   ‚úÖ {shot_id}: {len(result['rendered_files'])} –∫–∞–¥—Ä—ñ–≤")
            else:
                print(f"   ‚ùå {shot_id}: {result.get('error')}")
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"Error in batch creation: {e}")


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–∏."""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏...")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        sys.path.append(str(current_dir))
        from test_animation_system import run_all_tests
        
        success = run_all_tests()
        
        if success:
            print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤: {e}")
        logger.error(f"Error running tests: {e}")


def run_demo():
    """–ó–∞–ø—É—Å–∫–∞—î –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π."""
    print("\nüé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π...")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        sys.path.append(str(current_dir))
        from demo_animation_system import main as demo_main
        
        demo_main()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        logger.error(f"Error running demo: {e}")


def show_settings():
    """–ü–æ–∫–∞–∑—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏."""
    print("\n‚öôÔ∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")
    
    try:
        from integrated_animation_pipeline import IntegratedAnimationPipeline
        
        pipeline = IntegratedAnimationPipeline()
        
        # –ü–æ–∫–∞–∑ –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config = pipeline.config
        global_settings = config.get('global_settings', {})
        
        print("\n–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
        print(f"  FPS: {global_settings.get('fps', 24)}")
        print(f"  –†–æ–∑–¥—ñ–ª—å–Ω—ñ—Å—Ç—å: {global_settings.get('resolution', [1920, 1080])}")
        print(f"  –†–µ–Ω–¥–µ—Ä –¥–≤–∏–≥—É–Ω: {global_settings.get('render_engine', 'CYCLES')}")
        print(f"  –§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É: {global_settings.get('output_format', 'PNG')}")
        
        # –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤
        templates = config.get('animation_templates', {})
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –∞–Ω—ñ–º–∞—Ü—ñ–π: {len(templates)}")
        for name, template in templates.items():
            print(f"  - {name}: {template.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}")
        
        # –ü–æ–∫–∞–∑ —è–∫–æ—Å—Ç–µ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
        qualities = config.get('render_qualities', {})
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ñ —è–∫–æ—Å—Ç—ñ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É: {len(qualities)}")
        for name, quality in qualities.items():
            samples = quality.get('samples', 'N/A')
            resolution = quality.get('resolution', 'N/A')
            print(f"  - {name}: {samples} —Å–µ–º–ø–ª—ñ–≤, {resolution} —Ä–æ–∑–¥—ñ–ª—å–Ω—ñ—Å—Ç—å")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        logger.error(f"Error loading settings: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó Blender SCBW Pipeline...")
    
    while True:
        try:
            show_menu()
            choice = input("\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-9): ").strip()
            
            if choice == '1':
                create_battle_animation()
            elif choice == '2':
                create_construction_animation()
            elif choice == '3':
                create_cinematic_animation()
            elif choice == '4':
                create_custom_animation()
            elif choice == '5':
                batch_create_animations()
            elif choice == '6':
                run_tests()
            elif choice == '7':
                run_demo()
            elif choice == '8':
                show_settings()
            elif choice == '9':
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            else:
                print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            logger.error(f"Critical error in main loop: {e}")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


if __name__ == "__main__":
    main()