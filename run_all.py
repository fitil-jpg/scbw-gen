#!/usr/bin/env python3
"""
–ì–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É USD —Å—Ü–µ–Ω–∏
"""
import subprocess
import sys
import os

def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫–∞—î –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n=== {description} ===")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø—ñ—à–Ω–æ!")
            if result.stdout:
                print("–í–∏–≤—ñ–¥:")
                print(result.stdout)
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞!")
            if result.stderr:
                print("–ü–æ–º–∏–ª–∫–∞:")
                print(result.stderr)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫: {e}")
        return False

def main():
    print("üé¨ USD Scene Generator and Renderer")
    print("=" * 50)
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ü–µ–Ω–∏
    success = run_command("python3 build_scene.py", "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è USD —Å—Ü–µ–Ω–∏")
    if not success:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ü–µ–Ω—É!")
        return
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ü–µ–Ω–∏
    run_command("python3 check_scene.py", "–ê–Ω–∞–ª—ñ–∑ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ—ó —Å—Ü–µ–Ω–∏")
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–µ–Ω–¥–µ—Ä-—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    print("\n=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–Ω–¥–µ—Ä-—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ ===")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ usdrecord
    usdrecord_available = run_command("which usdrecord", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ usdrecord")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Blender
    blender_available = run_command("which blender", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Blender")
    
    # 4. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç)
    if usdrecord_available:
        print("\n=== –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ usdrecord ===")
        run_command("usdrecord scene.usda output_usdrecord.png --camera /World/Camera --width 800 --height 600", 
                   "–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ usdrecord")
    elif blender_available:
        print("\n=== –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Blender ===")
        run_command("python3 render_with_blender.py", "–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Blender")
    else:
        print("\n=== –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ===")
        print("–î–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –æ–¥–∏–Ω –∑ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:")
        print("1. usdrecord (—á–∞—Å—Ç–∏–Ω–∞ –ø–æ–≤–Ω–æ–≥–æ OpenUSD SDK)")
        print("2. Blender: brew install --cask blender")
        print("3. Houdini (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)")
    
    # 5. –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ ===")
    if os.path.exists("scene.usda"):
        print("‚úÖ USD —Å—Ü–µ–Ω–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞: scene.usda")
        print(f"   –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {os.path.getsize('scene.usda')} –±–∞–π—Ç")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    image_files = ["output.png", "output_usdrecord.png"]
    for img in image_files:
        if os.path.exists(img):
            print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {img}")
            print(f"   –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {os.path.getsize(img)} –±–∞–π—Ç")
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()